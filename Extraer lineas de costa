# Importar librerías necesarias
import ee
import geemap
import numpy as np
import geemap.colab
from skimage.filters import threshold_otsu

# Autenticación y inicialización de GEE
ee.Authenticate()
ee.Initialize()

# Parámetros de configuración
export_resolution_meters = 10  # Resolución de Sentinel-2
waterbody_size_meters = 4000
island_size_meters = 1000

# Definir el área de interés (modifica esto con tus coordenadas)
geometry = ee.Geometry.Polygon(
    [[[-74.0, 10.5], [-74.0, 10.0], [-73.5, 10.0], [-73.5, 10.5], [-74.0, 10.5]]]
)

# Función para aplicar la máscara de nubes en Sentinel-2
def mask_s2_clouds(image):
    qa = image.select('QA60')
    cloud_bit_mask = 1 << 10
    cirrus_bit_mask = 1 << 11
    mask = qa.bitwiseAnd(cloud_bit_mask).eq(0).And(qa.bitwiseAnd(cirrus_bit_mask).eq(0))
    return image.updateMask(mask).divide(10000)

# Función para detectar agua con AWEI
def detect_water(image):
    awei = image.expression(
        '4 * (GREEN - SWIR1) - (0.25 * NIR + 2.75 * SWIR2)',
        {
            'GREEN': image.select('green'),
            'NIR': image.select('nir'),
            'SWIR1': image.select('swir1'),
            'SWIR2': image.select('swir2'),
        }
    ).rename('awei')

    # Extraer valores de AWEI en una región pequeña
    awei_values = awei.reduceRegion(
        reducer=ee.Reducer.toList(),
        geometry=geometry,
        scale=export_resolution_meters,
        maxPixels=1e6
    ).get('awei').getInfo()

    # Calcular el umbral de Otsu
    if awei_values:
        otsu_threshold = threshold_otsu(np.array(awei_values))
    else:
        otsu_threshold = -0.1  # Valor por defecto si no hay datos

    water = awei.gt(otsu_threshold).rename('water')
    return water

# Función para eliminar agua interior e islas pequeñas
def remove_inland_water_and_islands(water_image):
    connected_pixels_land = int(waterbody_size_meters / export_resolution_meters)
    connected_pixels_water = int(island_size_meters / export_resolution_meters)

    land_filled = water_image.addBands(water_image).connectedComponents(
        connectivity=8, maxSize=connected_pixels_land
    )
    
    water_filled = land_filled.addBands(land_filled).connectedComponents(
        connectivity=8, maxSize=connected_pixels_water
    )
    
    return water_filled

# Bucle para cada año desde 2024 hasta 2015
for year in range(2024, 2014, -1):
    start_date = f"{year}-01-01"
    end_date = f"{year}-03-31"

    # Cargar imágenes Sentinel-2 y aplicar filtros
    collection = (
        ee.ImageCollection("COPERNICUS/S2_HARMONIZED")
        .filterDate(start_date, end_date)
        .filterBounds(geometry)
        .filter(ee.Filter.lt("CLOUDY_PIXEL_PERCENTAGE", 30))
        .map(mask_s2_clouds)
        .select(["B2", "B3", "B4", "B8", "B11", "B12"], ["blue", "green", "red", "nir", "swir1", "swir2"])
    )

    # Crear compuesto mediano y recortar
    composite = collection.median().clip(geometry)

    # Detectar agua
    water = detect_water(composite)

    # Eliminar agua interior e islas pequeñas
    land_water_boundary = remove_inland_water_and_islands(water)

    # Extraer contorno de la costa
    vectors = land_water_boundary.reduceToVectors(
        geometryType="polygon",
        scale=export_resolution_meters,
        geometry=geometry,
        maxPixels=1e10
    )

    # Exportar a Google Drive
    task_vector = ee.batch.Export.table.toDrive(
        collection=vectors,
        description=f"Extracted_Coastline_Vector_{year}",
        folder="coastlines",
        fileNamePrefix=f"coastline_{year}",
        fileFormat="SHP"
    )
    
    task_raster = ee.batch.Export.image.toDrive(
        image=land_water_boundary,
        description=f"Extracted_Land_Water_Boundary_Raster_{year}",
        folder="coastlines",
        fileNamePrefix=f"land_water_boundary_raster_{year}",
        region=geometry,
        scale=export_resolution_meters,
        maxPixels=1e10
    )
    
    task_composite = ee.batch.Export.image.toDrive(
        image=composite,
        description=f"Composite_{year}",
        folder="coastlines",
        fileNamePrefix=f"composite_{year}",
        region=geometry,
        scale=export_resolution_meters,
        maxPixels=1e10
    )

    # Iniciar exportaciones
    task_vector.start()
    task_raster.start()
    task_composite.start()

    print(f"Procesamiento para {year} iniciado.")

# Mostrar en el mapa con geemap
Map = geemap.Map()
Map.centerObject(geometry, 12)
Map.addLayer(composite, {"bands": ["red", "green", "blue"], "min": 0, "max": 0.3}, f"Composite {year}")
Map.addLayer(water, {"min": 0, "max": 1, "palette": ["white", "blue"]}, f"Water {year}")
Map.addLayer(land_water_boundary, {"min": 0, "max": 1, "palette": ["blue", "white"]}, f"Land-Water Boundary {year}")
Map.addLayer(vectors, {"color": "red"}, f"Coastline {year}")
Map
